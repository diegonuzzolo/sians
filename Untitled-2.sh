#!/bin/bash
set -e

TYPE="$1"
VERSION_OR_SLUG="$2"
URL="$3"
METHOD="$4"
SERVER_ID="$5"

SERVER_DIR="/home/diego/minecraft_servers/$SERVER_ID"
LOG_FILE="/home/diego/setup_log_${SERVER_ID}.log"

# Variabili API
UPDATE_URL="https://sians.it/update_status.php"
UPDATE_TOKEN="la_luna_il_mio_cane_numero_uno"  # Assicurati che combaci con il token lato PHP

# Inizializzazione log e directory
mkdir -p "$SERVER_DIR"
touch "$LOG_FILE"
chmod 644 "$LOG_FILE"
echo "[$(date)] Avvio installazione server $SERVER_ID (tipo: $TYPE)" >> "$LOG_FILE"
echo "Token utilizzato per update_status: Bearer $UPDATE_TOKEN" >> "$LOG_FILE"




# Funzione per aggiornare stato via API
update_status() {
    local status="$1"
    local progress="$2"
    echo "[$(date)] Chiamata update_status con status=$status, progress=$progress" >> "$LOG_FILE"

    response=$(curl -s -w "%{http_code}" -o /tmp/update_response_${SERVER_ID}.json -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $UPDATE_TOKEN" \
        -d "{\"server_id\": \"$SERVER_ID\", \"status\": \"$status\", \"progress\": $progress}" \
        "$UPDATE_URL")

    echo "[$(date)] HTTP response code: $response" >> "$LOG_FILE"
    cat /tmp/update_response_${SERVER_ID}.json >> "$LOG_FILE"
}

# Stato iniziale
update_status "installing" 5

cd "$SERVER_DIR"

cat > "$SERVER_DIR/server.properties" <<EOF
#Minecraft server properties
#Generated by setup script
spawn-protection=16
max-tick-time=60000
query.port=25565
generator-settings=
force-gamemode=false
allow-nether=true
enforce-whitelist=false
gamemode=0
broadcast-console-to-ops=true
enable-query=false
player-idle-timeout=0
difficulty=2
spawn-monsters=true
op-permission-level=4
pvp=true
snooper-enabled=true
level-type=default
hardcore=false
enable-command-block=false
max-players=50
network-compression-threshold=256
resource-pack-sha1=
max-world-size=29999984
function-permission-level=2
rcon.port=25575
server-port=25565
server-ip=0.0.0.0
spawn-npcs=true
allow-flight=false
level-name=world
view-distance=32
resource-pack=
motd=Il tuo server
generate-structures=true
max-build-height=256
online-mode=true
level-seed=
use-native-transport=true
enable-rcon=false
EOF

# ---- Installazione vanilla ----
if [ "$TYPE" == "vanilla" ]; then
    update_status "installing" 10
    wget -q "$URL" -O server.jar >> "$LOG_FILE" 2>&1
    update_status "installing" 40

# ---- Installazione Bukkit ----
elif [ "$TYPE" == "bukkit" ]; then
    update_status "installing" 10
    wget -q "$URL" -O server.jar >> "$LOG_FILE" 2>&1
    update_status "installing" 40

# ---- Installazione Modpack ----
elif [ "$TYPE" == "modpack" ]; then
    update_status "installing" 10

    if [ "$METHOD" == "curseforge" ]; then
        update_status "installing" 30
        wget -q "$URL" -O modpack.zip >> "$LOG_FILE" 2>&1
        update_status "installing" 50
        unzip -o modpack.zip -d . >> "$LOG_FILE" 2>&1
        rm -f modpack.zip

        if [ -f "manifest.json" ]; then
            echo "Manifest trovato. Avvio installazione mod..." >> "$LOG_FILE"
            update_status "downloading_mods" 60
            MODS_DIR="mods"
            mkdir -p "$MODS_DIR"
            MODRINTH_API="https://api.modrinth.com/v2"

            jq -c '.files[]' manifest.json | while read -r mod; do
                project_id=$(echo "$mod" | jq -r '.projectID')
                file_id=$(echo "$mod" | jq -r '.fileID')
                info=$(curl -s "$MODRINTH_API/project/$project_id/version/$file_id")
                mod_url=$(echo "$info" | jq -r '.files[0].url')
                wget -q "$mod_url" -P "$MODS_DIR" >> "$LOG_FILE" 2>&1
            done
            update_status "installing" 85
        fi

        if [ -f "forge-installer.jar" ]; then
            echo "Eseguo installer Forge..." >> "$LOG_FILE"
            java -jar forge-installer.jar --installServer >> "$LOG_FILE" 2>&1
            rm -f forge-installer.jar
        fi

    elif [ "$METHOD" == "modrinth" ]; then
        update_status "installing" 30
        wget -q "$URL" -O modpack.mrpack >> "$LOG_FILE" 2>&1
        update_status "installing" 50
        mkdir -p tmp_mrpack
        unzip -o modpack.mrpack -d tmp_mrpack >> "$LOG_FILE" 2>&1

        VERSION_FILE="tmp_mrpack/version.json"
        INSTALLER=$(jq -r '.dependencies.minecraft' "$VERSION_FILE")
        echo "Minecraft version: $INSTALLER" >> "$LOG_FILE"

        MODS_DIR="mods"
        mkdir -p "$MODS_DIR"

        for f in tmp_mrpack/mods/*.jar; do
            cp "$f" "$MODS_DIR/"
        done
        rm -rf tmp_mrpack modpack.mrpack

        update_status "installing" 85
    fi
fi




# ---- Comuni a tutti i tipi ----



# Accetta EULA
echo "eula=true" > eula.txt

# start.sh
cat > start.sh <<EOF
#!/bin/bash
cd "$(dirname "\$0")"
screen -dmS mc_$SERVER_ID java -Xmx2G -Xms2G -jar server.jar nogui
EOF

# stop.sh
cat > stop.sh <<EOF
#!/bin/bash
screen -S mc_$SERVER_ID -X stuff "stop$(printf '\r')"
EOF

chmod +x start.sh stop.sh

update_status "installed" 100
echo "[$(date)] Installazione completata per server $SERVER_ID" >> "$LOG_FILE"
